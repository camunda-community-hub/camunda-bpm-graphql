type Query {

    "Allows programmatic querying of Tasks based on the public Interface org.camunda.bpm.engine.task.TaskQuery"
    tasks(
        "Only select tasks which are assigned to the given user."
        assignee: String
        "Only select tasks with the given name"
        name: String
        "Only select tasks with a name matching the parameter. The syntax is that of SQL: for example usage: nameLike(%activiti%)"
        nameLike: String
    )
    : [Task]

	task(
		id: String!
	): Task

    taskVariables(
        taskId: String!
        names: [String]
    ): [KeyValuePair]

    incidents(
           "Only select Incidents with processId."
           processId: String!
    ):[Incident]

    historicActivityInstances(
        "Only select historic activity instances with processId."
        processId: String
        "Only select historic activity instances with activityType."
        activityType: String
        "Only select historic activity instances with taskAssignee."
        taskAssignee: String
    ):[HistoricActivityInstance]

    historicProcessInstances(
        "Only select historic process instances with processId."
    	processId: String
    	"Only select historic process instances with businessKey."
    	businessKey: String
   	): [HistoricProcessInstance]

    historicIncidents(
        "Only select historic incidents with processId."
        processId: String
    ): [HistoricIncident]

    processInstances(
        "Only select process instances with processId."
        processId: String
        "Only select process instances with a certain business key."
    	businessKey: String
   	): [ProcessInstance]

    processDefinition(
        id: String!
    ): ProcessDefinition

    processDefinitions(
        "process definition suspended state. true: get process definitions in suspended state, ommitted: get all process definitions"
        isSuspended: Boolean
        "Only select the process definitions which are the latest deployed (ie. which have the highest version number for the given key). "
        latest: Boolean
    ): [ProcessDefinition]

    groups(
        "Only select groups with the given name"
        name: String
        "Only select groups with a name matching the parameter. The syntax is that of SQL: for example usage: nameLike(%camunda%)"
        nameLike: String
        "Only select specific type of groups"
        type: String
    ): [Group]

    group(
        "Only select a group by group id"
        id: String!
    ): Group

    users(
        "Only select users with the given first name"
        firstName: String
        "Only select users with a first name matching the parameter. The syntax is that of SQL: for example usage: nameLike: \"%camunda%\""
        firstNameLike: String
        "The group of user belongs to"
        groupId: String
    ): [User]

    user(
        "Only select a user by user id"
        id: String!
    ): User

}

type Mutation {
    "sets the assignee of a Task"
    setAssignee(
        taskEntityId: String!
        assignee: String!
    )
    : Task

    "Starts a new process instance in the latest version of the process definition with the given key."
    createProcessInstance(
        "unique name for all versions this definition"
        processDefintionKey: String!
        variables: [KeyValuePairInput]
    )
    : ProcessInstance

    "Marks a task as done and continues process execution. This method is typically called by a task list user interface after a task form has been submitted by the assignee and the required task parameters have been provided."
    completeTask(
        taskId: String!
    	variables: [KeyValuePairInput]
    )
    : ProcessInstance

   "Claim responsibility for a task: the given user is made assignee for the task. The difference with setAssignee(String, String) is that here a check is done if the task already has a user assigned to it. No check is done whether the user is known by the identity component."
    claimTask(
        "task to claim, cannot be null."
        taskId: String!
        "user that claims the task. When userId is null the task is unclaimed, assigned to no one."
        userId: String
    )
    : Task

    startProcessInstanceByKey(
        key: String!
    ): ProcessInstance

    startProcessInstanceByMessage(
        message: String!
        businesskey: String
        variables: [KeyValuePairInput]
    ): ProcessInstance
}

